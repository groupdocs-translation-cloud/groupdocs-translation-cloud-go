/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 24.3.0
Contact: anton.perhunov@aspose.com
*/

package groupdocs_translation_cloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// SwaggerAPIService SwaggerAPI service
type SwaggerAPIService service

type ApiSwaggerSpecGetRequest struct {
	ctx            context.Context
	ApiService     *SwaggerAPIService
	isYaml         *bool
	serialaizeAsV2 *bool
}

func (r ApiSwaggerSpecGetRequest) IsYaml(isYaml bool) ApiSwaggerSpecGetRequest {
	r.isYaml = &isYaml
	return r
}

func (r ApiSwaggerSpecGetRequest) SerialaizeAsV2(serialaizeAsV2 bool) ApiSwaggerSpecGetRequest {
	r.serialaizeAsV2 = &serialaizeAsV2
	return r
}

func (r ApiSwaggerSpecGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwaggerSpecGetExecute(r)
}

/*
SwaggerSpecGet Method for SwaggerSpecGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSwaggerSpecGetRequest
*/
func (a *SwaggerAPIService) SwaggerSpecGet(ctx context.Context) ApiSwaggerSpecGetRequest {
	return ApiSwaggerSpecGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SwaggerAPIService) SwaggerSpecGetExecute(r ApiSwaggerSpecGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwaggerAPIService.SwaggerSpecGet")
	if err != nil {
		return nil, &GenericAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/swagger/spec"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isYaml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsYaml", r.isYaml, "")
	}
	if r.serialaizeAsV2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SerialaizeAsV2", r.serialaizeAsV2, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
