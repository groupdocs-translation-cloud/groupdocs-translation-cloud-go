/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 25.3.0
Contact: anton.perhunov@aspose.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package groupdocs_translation_cloud

import (
	"encoding/json"
)

// checks if the WorksheetData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorksheetData{}

// WorksheetData struct for WorksheetData
type WorksheetData struct {
	Rows []int32 `json:"rows,omitempty"`
	Columns []int32 `json:"columns,omitempty"`
	Ranges []StringStringTuple `json:"ranges,omitempty"`
}

// NewWorksheetData instantiates a new WorksheetData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorksheetData() *WorksheetData {
	this := WorksheetData{}
	return &this
}

// NewWorksheetDataWithDefaults instantiates a new WorksheetData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorksheetDataWithDefaults() *WorksheetData {
	this := WorksheetData{}
	return &this
}

// GetRows returns the Rows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorksheetData) GetRows() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorksheetData) GetRowsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *WorksheetData) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []int32 and assigns it to the Rows field.
func (o *WorksheetData) SetRows(v []int32) {
	o.Rows = v
}

// GetColumns returns the Columns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorksheetData) GetColumns() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorksheetData) GetColumnsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *WorksheetData) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []int32 and assigns it to the Columns field.
func (o *WorksheetData) SetColumns(v []int32) {
	o.Columns = v
}

// GetRanges returns the Ranges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorksheetData) GetRanges() []StringStringTuple {
	if o == nil {
		var ret []StringStringTuple
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorksheetData) GetRangesOk() ([]StringStringTuple, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *WorksheetData) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []StringStringTuple and assigns it to the Ranges field.
func (o *WorksheetData) SetRanges(v []StringStringTuple) {
	o.Ranges = v
}

func (o WorksheetData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorksheetData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Rows != nil {
		toSerialize["rows"] = o.Rows
	}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.Ranges != nil {
		toSerialize["ranges"] = o.Ranges
	}
	return toSerialize, nil
}

type NullableWorksheetData struct {
	value *WorksheetData
	isSet bool
}

func (v NullableWorksheetData) Get() *WorksheetData {
	return v.value
}

func (v *NullableWorksheetData) Set(val *WorksheetData) {
	v.value = val
	v.isSet = true
}

func (v NullableWorksheetData) IsSet() bool {
	return v.isSet
}

func (v *NullableWorksheetData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorksheetData(val *WorksheetData) *NullableWorksheetData {
	return &NullableWorksheetData{value: val, isSet: true}
}

func (v NullableWorksheetData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorksheetData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


