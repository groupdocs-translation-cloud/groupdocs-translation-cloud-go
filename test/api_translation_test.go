/*
GroupDocs.Translation SDK

Testing TranslationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package groupdocs_translation_cloud

import (
	"context"
	"fmt"
	openapiclient "github.com/groupdocs-translation-cloud/groupdocs-translation-cloud-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"os"
	"testing"
	"time"
)

var configuration *openapiclient.Configuration
var apiClient *openapiclient.APIClient

func TestMain(m *testing.M) {
	configuration = openapiclient.NewConfiguration(os.Getenv("GDT_ClientId"), os.Getenv("GDT_ClientSecret"))
	configuration.Debug = false
	apiClient = openapiclient.NewAPIClient(configuration)
	m.Run()
}
func GetFileTranslation(t *testing.T, id string) openapiclient.CloudFileResponse {
	var response openapiclient.CloudFileResponse
	for i := 0; i < 20; i++ {
		resp, _, err := apiClient.TranslationAPI.DocumentRequestIdGet(context.Background(), id).Execute()
		require.Nil(t, err)
		if len(resp.Urls) > 0 {
			response = *resp
			break
		}
		time.Sleep(5 * time.Second)
	}
	require.NotNil(t, response)
	require.NotNil(t, response.Urls)
	fmt.Println(response.Urls)
	return response
}

func GetText(t *testing.T, id string) openapiclient.CloudTextResponse {
	var response openapiclient.CloudTextResponse
	for i := 0; i < 20; i++ {
		resp, _, err := apiClient.TranslationAPI.TextRequestIdGet(context.Background(), id).Execute()
		require.Nil(t, err)
		if len(resp.Translations) > 0 {
			response = *resp
			break
		}
		time.Sleep(5 * time.Second)
	}
	require.NotNil(t, response)
	require.NotNil(t, response.Translations)
	fmt.Println(response.Translations)
	return response
}
func Test_groupdocs_translation_cloud_TranslationAPIService(t *testing.T) {

	t.Run("Test TranslationAPIService AutoPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.AutoPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService CsvPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.CsvPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService DocumentPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.DocumentPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService DocumentRequestIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		resp, httpRes, err := apiClient.TranslationAPI.DocumentRequestIdGet(context.Background(), requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService DocumentTrialGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.DocumentTrialGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService DocumentTrialPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.DocumentTrialPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService HcGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.HcGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test TranslationAPIService HtmlPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.HtmlPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService HugoGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.HugoGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService HugoPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.HugoPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService ImageToFilePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.ImageToFilePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService ImageToTextPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.ImageToTextPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService LanguagesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.LanguagesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService MarkdownPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.MarkdownPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService PdfPost", func(t *testing.T) {
		fileReq := apiClient.FileAPI.FileUploadPost(context.Background())
		file, err := os.OpenFile("test_data/somatosensory.pdf", os.O_RDONLY, os.ModePerm)
		filename := "somatosensory.pdf"
		fileReq = fileReq.File(file)
		fileReq = fileReq.Format("pdf")
		fileResp, _, err := fileReq.Execute()
		req := apiClient.TranslationAPI.PdfPost(context.Background())
		request := openapiclient.PdfFileRequest{}
		request.Url.Set(&fileResp)
		request.SourceLanguage = "en"
		request.TargetLanguages = []string{"ru"}
		request.OriginalFileName.Set(&filename)
		request.OutputFormat = "pdf"
		req.PdfFileRequest(request)
		resp, httpRes, err := req.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		GetFileTranslation(t, resp.GetId())
	})

	t.Run("Test TranslationAPIService PdfTrialPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.PdfTrialPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService PresentationPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.PresentationPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService ResxPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.ResxPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService SpreadsheetPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.SpreadsheetPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService SrtPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.SrtPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService TextPost", func(t *testing.T) {
		source := "en"
		req := apiClient.TranslationAPI.TextPost(context.Background())
		textRequest := openapiclient.TextRequest{}
		textRequest.SourceLanguage.Set(&source)
		textRequest.TargetLanguages = []string{"ru", "es"}
		textRequest.Texts = []string{"Hello world!", "Brown fox jump over the lazy dog."}
		req = req.TextRequest(textRequest)
		resp, httpRes, err := req.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, 202, int(*resp.Status))
		GetText(t, resp.GetId())
	})

	t.Run("Test TranslationAPIService TextTrialGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.TextTrialGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranslationAPIService TextTrialPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TranslationAPI.TextTrialPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
