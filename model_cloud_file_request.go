/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 24.3.0
Contact: anton.perhunov@aspose.com
*/

package groupdocs_translation_cloud

import (
	"encoding/json"
)

// checks if the CloudFileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudFileRequest{}

// CloudFileRequest struct for CloudFileRequest
type CloudFileRequest struct {
	// \"doc(x|m)\" if Word document, \"xls(x|m)\" if Excel workbook
	Format NullableString `json:"format,omitempty"`
	// output file format
	OutFormat NullableString `json:"outFormat,omitempty"`
	// id of request
	RequestId NullableString `json:"requestId,omitempty"`
	// Language pairs to translate
	Ids []int32 `json:"ids,omitempty"`
	// Link to file for translation
	Url NullableString `json:"url,omitempty"`
	// File size
	Size *int64 `json:"size,omitempty"`
	// If translate master slides
	Masters *bool `json:"masters,omitempty"`
	// If document's formatting should be preserved, default true
	Formatting *bool `json:"formatting,omitempty"`
	// for analysis only
	Origin NullableString `json:"origin,omitempty"`
	// List of slides to translate
	Elements []int32 `json:"elements,omitempty"`
	// Dictionary of ranges in Excel workbooks
	Ranges map[string]WorksheetData `json:"ranges,omitempty"`
	// Dictiory of short code names and parameters names to translate
	ShortCodeDict map[string][]string `json:"shortCodeDict,omitempty"`
	// Dictionary where key is zero-based front matter index and value is list of lists of front matter paths
	FrontMatterList [][]string `json:"frontMatterList,omitempty"`
	// Original name of file
	OriginalFileName NullableString `json:"originalFileName,omitempty"`
	// Separator in files
	Separator NullableString `json:"separator,omitempty"`
	// Set true if paid user
	IsPaid *bool `json:"isPaid,omitempty"`
	// Toggle files saving mode
	SavingMode *string `json:"savingMode,omitempty"`
	// Details of the requests. Using for e2e tracking
	Details map[string]string `json:"details,omitempty"`
}

// NewCloudFileRequest instantiates a new CloudFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudFileRequest() *CloudFileRequest {
	this := CloudFileRequest{}
	return &this
}

// NewCloudFileRequestWithDefaults instantiates a new CloudFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudFileRequestWithDefaults() *CloudFileRequest {
	this := CloudFileRequest{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetFormat() string {
	if o == nil || IsNil(o.Format.Get()) {
		var ret string
		return ret
	}
	return *o.Format.Get()
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Format.Get(), o.Format.IsSet()
}

// HasFormat returns a boolean if a field has been set.
func (o *CloudFileRequest) HasFormat() bool {
	if o != nil && o.Format.IsSet() {
		return true
	}

	return false
}

// SetFormat gets a reference to the given NullableString and assigns it to the Format field.
func (o *CloudFileRequest) SetFormat(v string) {
	o.Format.Set(&v)
}

// SetFormatNil sets the value for Format to be an explicit nil
func (o *CloudFileRequest) SetFormatNil() {
	o.Format.Set(nil)
}

// UnsetFormat ensures that no value is present for Format, not even an explicit nil
func (o *CloudFileRequest) UnsetFormat() {
	o.Format.Unset()
}

// GetOutFormat returns the OutFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetOutFormat() string {
	if o == nil || IsNil(o.OutFormat.Get()) {
		var ret string
		return ret
	}
	return *o.OutFormat.Get()
}

// GetOutFormatOk returns a tuple with the OutFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetOutFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutFormat.Get(), o.OutFormat.IsSet()
}

// HasOutFormat returns a boolean if a field has been set.
func (o *CloudFileRequest) HasOutFormat() bool {
	if o != nil && o.OutFormat.IsSet() {
		return true
	}

	return false
}

// SetOutFormat gets a reference to the given NullableString and assigns it to the OutFormat field.
func (o *CloudFileRequest) SetOutFormat(v string) {
	o.OutFormat.Set(&v)
}

// SetOutFormatNil sets the value for OutFormat to be an explicit nil
func (o *CloudFileRequest) SetOutFormatNil() {
	o.OutFormat.Set(nil)
}

// UnsetOutFormat ensures that no value is present for OutFormat, not even an explicit nil
func (o *CloudFileRequest) UnsetOutFormat() {
	o.OutFormat.Unset()
}

// GetRequestId returns the RequestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetRequestId() string {
	if o == nil || IsNil(o.RequestId.Get()) {
		var ret string
		return ret
	}
	return *o.RequestId.Get()
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestId.Get(), o.RequestId.IsSet()
}

// HasRequestId returns a boolean if a field has been set.
func (o *CloudFileRequest) HasRequestId() bool {
	if o != nil && o.RequestId.IsSet() {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given NullableString and assigns it to the RequestId field.
func (o *CloudFileRequest) SetRequestId(v string) {
	o.RequestId.Set(&v)
}

// SetRequestIdNil sets the value for RequestId to be an explicit nil
func (o *CloudFileRequest) SetRequestIdNil() {
	o.RequestId.Set(nil)
}

// UnsetRequestId ensures that no value is present for RequestId, not even an explicit nil
func (o *CloudFileRequest) UnsetRequestId() {
	o.RequestId.Unset()
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *CloudFileRequest) HasIds() bool {
	if o != nil && IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *CloudFileRequest) SetIds(v []int32) {
	o.Ids = v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *CloudFileRequest) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *CloudFileRequest) SetUrl(v string) {
	o.Url.Set(&v)
}

// SetUrlNil sets the value for Url to be an explicit nil
func (o *CloudFileRequest) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *CloudFileRequest) UnsetUrl() {
	o.Url.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CloudFileRequest) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudFileRequest) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CloudFileRequest) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *CloudFileRequest) SetSize(v int64) {
	o.Size = &v
}

// GetMasters returns the Masters field value if set, zero value otherwise.
func (o *CloudFileRequest) GetMasters() bool {
	if o == nil || IsNil(o.Masters) {
		var ret bool
		return ret
	}
	return *o.Masters
}

// GetMastersOk returns a tuple with the Masters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudFileRequest) GetMastersOk() (*bool, bool) {
	if o == nil || IsNil(o.Masters) {
		return nil, false
	}
	return o.Masters, true
}

// HasMasters returns a boolean if a field has been set.
func (o *CloudFileRequest) HasMasters() bool {
	if o != nil && !IsNil(o.Masters) {
		return true
	}

	return false
}

// SetMasters gets a reference to the given bool and assigns it to the Masters field.
func (o *CloudFileRequest) SetMasters(v bool) {
	o.Masters = &v
}

// GetFormatting returns the Formatting field value if set, zero value otherwise.
func (o *CloudFileRequest) GetFormatting() bool {
	if o == nil || IsNil(o.Formatting) {
		var ret bool
		return ret
	}
	return *o.Formatting
}

// GetFormattingOk returns a tuple with the Formatting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudFileRequest) GetFormattingOk() (*bool, bool) {
	if o == nil || IsNil(o.Formatting) {
		return nil, false
	}
	return o.Formatting, true
}

// HasFormatting returns a boolean if a field has been set.
func (o *CloudFileRequest) HasFormatting() bool {
	if o != nil && !IsNil(o.Formatting) {
		return true
	}

	return false
}

// SetFormatting gets a reference to the given bool and assigns it to the Formatting field.
func (o *CloudFileRequest) SetFormatting(v bool) {
	o.Formatting = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetOrigin() string {
	if o == nil || IsNil(o.Origin.Get()) {
		var ret string
		return ret
	}
	return *o.Origin.Get()
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Origin.Get(), o.Origin.IsSet()
}

// HasOrigin returns a boolean if a field has been set.
func (o *CloudFileRequest) HasOrigin() bool {
	if o != nil && o.Origin.IsSet() {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given NullableString and assigns it to the Origin field.
func (o *CloudFileRequest) SetOrigin(v string) {
	o.Origin.Set(&v)
}

// SetOriginNil sets the value for Origin to be an explicit nil
func (o *CloudFileRequest) SetOriginNil() {
	o.Origin.Set(nil)
}

// UnsetOrigin ensures that no value is present for Origin, not even an explicit nil
func (o *CloudFileRequest) UnsetOrigin() {
	o.Origin.Unset()
}

// GetElements returns the Elements field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetElements() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetElementsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Elements) {
		return nil, false
	}
	return o.Elements, true
}

// HasElements returns a boolean if a field has been set.
func (o *CloudFileRequest) HasElements() bool {
	if o != nil && IsNil(o.Elements) {
		return true
	}

	return false
}

// SetElements gets a reference to the given []int32 and assigns it to the Elements field.
func (o *CloudFileRequest) SetElements(v []int32) {
	o.Elements = v
}

// GetRanges returns the Ranges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetRanges() map[string]WorksheetData {
	if o == nil {
		var ret map[string]WorksheetData
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetRangesOk() (*map[string]WorksheetData, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return &o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *CloudFileRequest) HasRanges() bool {
	if o != nil && IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given map[string]WorksheetData and assigns it to the Ranges field.
func (o *CloudFileRequest) SetRanges(v map[string]WorksheetData) {
	o.Ranges = v
}

// GetShortCodeDict returns the ShortCodeDict field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetShortCodeDict() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}
	return o.ShortCodeDict
}

// GetShortCodeDictOk returns a tuple with the ShortCodeDict field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetShortCodeDictOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.ShortCodeDict) {
		return nil, false
	}
	return &o.ShortCodeDict, true
}

// HasShortCodeDict returns a boolean if a field has been set.
func (o *CloudFileRequest) HasShortCodeDict() bool {
	if o != nil && IsNil(o.ShortCodeDict) {
		return true
	}

	return false
}

// SetShortCodeDict gets a reference to the given map[string][]string and assigns it to the ShortCodeDict field.
func (o *CloudFileRequest) SetShortCodeDict(v map[string][]string) {
	o.ShortCodeDict = v
}

// GetFrontMatterList returns the FrontMatterList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetFrontMatterList() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}
	return o.FrontMatterList
}

// GetFrontMatterListOk returns a tuple with the FrontMatterList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetFrontMatterListOk() ([][]string, bool) {
	if o == nil || IsNil(o.FrontMatterList) {
		return nil, false
	}
	return o.FrontMatterList, true
}

// HasFrontMatterList returns a boolean if a field has been set.
func (o *CloudFileRequest) HasFrontMatterList() bool {
	if o != nil && IsNil(o.FrontMatterList) {
		return true
	}

	return false
}

// SetFrontMatterList gets a reference to the given [][]string and assigns it to the FrontMatterList field.
func (o *CloudFileRequest) SetFrontMatterList(v [][]string) {
	o.FrontMatterList = v
}

// GetOriginalFileName returns the OriginalFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetOriginalFileName() string {
	if o == nil || IsNil(o.OriginalFileName.Get()) {
		var ret string
		return ret
	}
	return *o.OriginalFileName.Get()
}

// GetOriginalFileNameOk returns a tuple with the OriginalFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetOriginalFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalFileName.Get(), o.OriginalFileName.IsSet()
}

// HasOriginalFileName returns a boolean if a field has been set.
func (o *CloudFileRequest) HasOriginalFileName() bool {
	if o != nil && o.OriginalFileName.IsSet() {
		return true
	}

	return false
}

// SetOriginalFileName gets a reference to the given NullableString and assigns it to the OriginalFileName field.
func (o *CloudFileRequest) SetOriginalFileName(v string) {
	o.OriginalFileName.Set(&v)
}

// SetOriginalFileNameNil sets the value for OriginalFileName to be an explicit nil
func (o *CloudFileRequest) SetOriginalFileNameNil() {
	o.OriginalFileName.Set(nil)
}

// UnsetOriginalFileName ensures that no value is present for OriginalFileName, not even an explicit nil
func (o *CloudFileRequest) UnsetOriginalFileName() {
	o.OriginalFileName.Unset()
}

// GetSeparator returns the Separator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetSeparator() string {
	if o == nil || IsNil(o.Separator.Get()) {
		var ret string
		return ret
	}
	return *o.Separator.Get()
}

// GetSeparatorOk returns a tuple with the Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetSeparatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Separator.Get(), o.Separator.IsSet()
}

// HasSeparator returns a boolean if a field has been set.
func (o *CloudFileRequest) HasSeparator() bool {
	if o != nil && o.Separator.IsSet() {
		return true
	}

	return false
}

// SetSeparator gets a reference to the given NullableString and assigns it to the Separator field.
func (o *CloudFileRequest) SetSeparator(v string) {
	o.Separator.Set(&v)
}

// SetSeparatorNil sets the value for Separator to be an explicit nil
func (o *CloudFileRequest) SetSeparatorNil() {
	o.Separator.Set(nil)
}

// UnsetSeparator ensures that no value is present for Separator, not even an explicit nil
func (o *CloudFileRequest) UnsetSeparator() {
	o.Separator.Unset()
}

// GetIsPaid returns the IsPaid field value if set, zero value otherwise.
func (o *CloudFileRequest) GetIsPaid() bool {
	if o == nil || IsNil(o.IsPaid) {
		var ret bool
		return ret
	}
	return *o.IsPaid
}

// GetIsPaidOk returns a tuple with the IsPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudFileRequest) GetIsPaidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaid) {
		return nil, false
	}
	return o.IsPaid, true
}

// HasIsPaid returns a boolean if a field has been set.
func (o *CloudFileRequest) HasIsPaid() bool {
	if o != nil && !IsNil(o.IsPaid) {
		return true
	}

	return false
}

// SetIsPaid gets a reference to the given bool and assigns it to the IsPaid field.
func (o *CloudFileRequest) SetIsPaid(v bool) {
	o.IsPaid = &v
}

// GetSavingMode returns the SavingMode field value if set, zero value otherwise.
func (o *CloudFileRequest) GetSavingMode() string {
	if o == nil || IsNil(o.SavingMode) {
		var ret string
		return ret
	}
	return *o.SavingMode
}

// GetSavingModeOk returns a tuple with the SavingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudFileRequest) GetSavingModeOk() (*string, bool) {
	if o == nil || IsNil(o.SavingMode) {
		return nil, false
	}
	return o.SavingMode, true
}

// HasSavingMode returns a boolean if a field has been set.
func (o *CloudFileRequest) HasSavingMode() bool {
	if o != nil && !IsNil(o.SavingMode) {
		return true
	}

	return false
}

// SetSavingMode gets a reference to the given string and assigns it to the SavingMode field.
func (o *CloudFileRequest) SetSavingMode(v string) {
	o.SavingMode = &v
}

// GetDetails returns the Details field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudFileRequest) GetDetails() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudFileRequest) GetDetailsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return &o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *CloudFileRequest) HasDetails() bool {
	if o != nil && IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]string and assigns it to the Details field.
func (o *CloudFileRequest) SetDetails(v map[string]string) {
	o.Details = v
}

func (o CloudFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudFileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Format.IsSet() {
		toSerialize["format"] = o.Format.Get()
	}
	if o.OutFormat.IsSet() {
		toSerialize["outFormat"] = o.OutFormat.Get()
	}
	if o.RequestId.IsSet() {
		toSerialize["requestId"] = o.RequestId.Get()
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Masters) {
		toSerialize["masters"] = o.Masters
	}
	if !IsNil(o.Formatting) {
		toSerialize["formatting"] = o.Formatting
	}
	if o.Origin.IsSet() {
		toSerialize["origin"] = o.Origin.Get()
	}
	if o.Elements != nil {
		toSerialize["elements"] = o.Elements
	}
	if o.Ranges != nil {
		toSerialize["ranges"] = o.Ranges
	}
	if o.ShortCodeDict != nil {
		toSerialize["shortCodeDict"] = o.ShortCodeDict
	}
	if o.FrontMatterList != nil {
		toSerialize["frontMatterList"] = o.FrontMatterList
	}
	if o.OriginalFileName.IsSet() {
		toSerialize["originalFileName"] = o.OriginalFileName.Get()
	}
	if o.Separator.IsSet() {
		toSerialize["separator"] = o.Separator.Get()
	}
	if !IsNil(o.IsPaid) {
		toSerialize["isPaid"] = o.IsPaid
	}
	if !IsNil(o.SavingMode) {
		toSerialize["savingMode"] = o.SavingMode
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

type NullableCloudFileRequest struct {
	value *CloudFileRequest
	isSet bool
}

func (v NullableCloudFileRequest) Get() *CloudFileRequest {
	return v.value
}

func (v *NullableCloudFileRequest) Set(val *CloudFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudFileRequest(val *CloudFileRequest) *NullableCloudFileRequest {
	return &NullableCloudFileRequest{value: val, isSet: true}
}

func (v NullableCloudFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
