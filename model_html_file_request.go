/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 25.3.0
Contact: anton.perhunov@aspose.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package groupdocs_translation_cloud

import (
	"encoding/json"
)

// checks if the HtmlFileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HtmlFileRequest{}

// HtmlFileRequest Request for HTML files
type HtmlFileRequest struct {
	// Language of original file
	SourceLanguage *string `json:"sourceLanguage,omitempty"`
	// List of target languages
	TargetLanguages []string `json:"targetLanguages,omitempty"`
	// Type in the file name. If null will be as request ID.
	OriginalFileName NullableString `json:"originalFileName,omitempty"`
	// Link to file for translation. Ignore, if \"file\" property not null
	Url *string `json:"url,omitempty"`
	// Url or name of the application using this SDK. Not required.
	Origin NullableString `json:"origin,omitempty"`
	// Do result formating like the source. This option needs more expensive requests.
	IsNeedAlignment *bool `json:"isNeedAlignment,omitempty"`
	// Set a specific translation between source and target words.
	TranslationDictionary map[string]string `json:"translationDictionary,omitempty"`
	// Toggle file saving mode for storage.  Is Files by default.
	SavingMode *string `json:"savingMode,omitempty"`
	// output file format
	OutputFormat *string `json:"outputFormat,omitempty"`
}

// NewHtmlFileRequest instantiates a new HtmlFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHtmlFileRequest() *HtmlFileRequest {
	this := HtmlFileRequest{}
	var sourceLanguage string = "en"
	this.SourceLanguage = &sourceLanguage
	return &this
}

// NewHtmlFileRequestWithDefaults instantiates a new HtmlFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHtmlFileRequestWithDefaults() *HtmlFileRequest {
	this := HtmlFileRequest{}
	var sourceLanguage string = "en"
	this.SourceLanguage = &sourceLanguage
	return &this
}

// GetSourceLanguage returns the SourceLanguage field value if set, zero value otherwise.
func (o *HtmlFileRequest) GetSourceLanguage() string {
	if o == nil || IsNil(o.SourceLanguage) {
		var ret string
		return ret
	}
	return *o.SourceLanguage
}

// GetSourceLanguageOk returns a tuple with the SourceLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HtmlFileRequest) GetSourceLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.SourceLanguage) {
		return nil, false
	}
	return o.SourceLanguage, true
}

// HasSourceLanguage returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasSourceLanguage() bool {
	if o != nil && !IsNil(o.SourceLanguage) {
		return true
	}

	return false
}

// SetSourceLanguage gets a reference to the given string and assigns it to the SourceLanguage field.
func (o *HtmlFileRequest) SetSourceLanguage(v string) {
	o.SourceLanguage = &v
}

// GetTargetLanguages returns the TargetLanguages field value if set, zero value otherwise.
func (o *HtmlFileRequest) GetTargetLanguages() []string {
	if o == nil || IsNil(o.TargetLanguages) {
		var ret []string
		return ret
	}
	return o.TargetLanguages
}

// GetTargetLanguagesOk returns a tuple with the TargetLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HtmlFileRequest) GetTargetLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetLanguages) {
		return nil, false
	}
	return o.TargetLanguages, true
}

// HasTargetLanguages returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasTargetLanguages() bool {
	if o != nil && !IsNil(o.TargetLanguages) {
		return true
	}

	return false
}

// SetTargetLanguages gets a reference to the given []string and assigns it to the TargetLanguages field.
func (o *HtmlFileRequest) SetTargetLanguages(v []string) {
	o.TargetLanguages = v
}

// GetOriginalFileName returns the OriginalFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HtmlFileRequest) GetOriginalFileName() string {
	if o == nil || IsNil(o.OriginalFileName.Get()) {
		var ret string
		return ret
	}
	return *o.OriginalFileName.Get()
}

// GetOriginalFileNameOk returns a tuple with the OriginalFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HtmlFileRequest) GetOriginalFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalFileName.Get(), o.OriginalFileName.IsSet()
}

// HasOriginalFileName returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasOriginalFileName() bool {
	if o != nil && o.OriginalFileName.IsSet() {
		return true
	}

	return false
}

// SetOriginalFileName gets a reference to the given NullableString and assigns it to the OriginalFileName field.
func (o *HtmlFileRequest) SetOriginalFileName(v string) {
	o.OriginalFileName.Set(&v)
}
// SetOriginalFileNameNil sets the value for OriginalFileName to be an explicit nil
func (o *HtmlFileRequest) SetOriginalFileNameNil() {
	o.OriginalFileName.Set(nil)
}

// UnsetOriginalFileName ensures that no value is present for OriginalFileName, not even an explicit nil
func (o *HtmlFileRequest) UnsetOriginalFileName() {
	o.OriginalFileName.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *HtmlFileRequest) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HtmlFileRequest) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *HtmlFileRequest) SetUrl(v string) {
	o.Url = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HtmlFileRequest) GetOrigin() string {
	if o == nil || IsNil(o.Origin.Get()) {
		var ret string
		return ret
	}
	return *o.Origin.Get()
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HtmlFileRequest) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Origin.Get(), o.Origin.IsSet()
}

// HasOrigin returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasOrigin() bool {
	if o != nil && o.Origin.IsSet() {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given NullableString and assigns it to the Origin field.
func (o *HtmlFileRequest) SetOrigin(v string) {
	o.Origin.Set(&v)
}
// SetOriginNil sets the value for Origin to be an explicit nil
func (o *HtmlFileRequest) SetOriginNil() {
	o.Origin.Set(nil)
}

// UnsetOrigin ensures that no value is present for Origin, not even an explicit nil
func (o *HtmlFileRequest) UnsetOrigin() {
	o.Origin.Unset()
}

// GetIsNeedAlignment returns the IsNeedAlignment field value if set, zero value otherwise.
func (o *HtmlFileRequest) GetIsNeedAlignment() bool {
	if o == nil || IsNil(o.IsNeedAlignment) {
		var ret bool
		return ret
	}
	return *o.IsNeedAlignment
}

// GetIsNeedAlignmentOk returns a tuple with the IsNeedAlignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HtmlFileRequest) GetIsNeedAlignmentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNeedAlignment) {
		return nil, false
	}
	return o.IsNeedAlignment, true
}

// HasIsNeedAlignment returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasIsNeedAlignment() bool {
	if o != nil && !IsNil(o.IsNeedAlignment) {
		return true
	}

	return false
}

// SetIsNeedAlignment gets a reference to the given bool and assigns it to the IsNeedAlignment field.
func (o *HtmlFileRequest) SetIsNeedAlignment(v bool) {
	o.IsNeedAlignment = &v
}

// GetTranslationDictionary returns the TranslationDictionary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HtmlFileRequest) GetTranslationDictionary() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.TranslationDictionary
}

// GetTranslationDictionaryOk returns a tuple with the TranslationDictionary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HtmlFileRequest) GetTranslationDictionaryOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TranslationDictionary) {
		return nil, false
	}
	return &o.TranslationDictionary, true
}

// HasTranslationDictionary returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasTranslationDictionary() bool {
	if o != nil && !IsNil(o.TranslationDictionary) {
		return true
	}

	return false
}

// SetTranslationDictionary gets a reference to the given map[string]string and assigns it to the TranslationDictionary field.
func (o *HtmlFileRequest) SetTranslationDictionary(v map[string]string) {
	o.TranslationDictionary = v
}

// GetSavingMode returns the SavingMode field value if set, zero value otherwise.
func (o *HtmlFileRequest) GetSavingMode() string {
	if o == nil || IsNil(o.SavingMode) {
		var ret string
		return ret
	}
	return *o.SavingMode
}

// GetSavingModeOk returns a tuple with the SavingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HtmlFileRequest) GetSavingModeOk() (*string, bool) {
	if o == nil || IsNil(o.SavingMode) {
		return nil, false
	}
	return o.SavingMode, true
}

// HasSavingMode returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasSavingMode() bool {
	if o != nil && !IsNil(o.SavingMode) {
		return true
	}

	return false
}

// SetSavingMode gets a reference to the given string and assigns it to the SavingMode field.
func (o *HtmlFileRequest) SetSavingMode(v string) {
	o.SavingMode = &v
}

// GetOutputFormat returns the OutputFormat field value if set, zero value otherwise.
func (o *HtmlFileRequest) GetOutputFormat() string {
	if o == nil || IsNil(o.OutputFormat) {
		var ret string
		return ret
	}
	return *o.OutputFormat
}

// GetOutputFormatOk returns a tuple with the OutputFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HtmlFileRequest) GetOutputFormatOk() (*string, bool) {
	if o == nil || IsNil(o.OutputFormat) {
		return nil, false
	}
	return o.OutputFormat, true
}

// HasOutputFormat returns a boolean if a field has been set.
func (o *HtmlFileRequest) HasOutputFormat() bool {
	if o != nil && !IsNil(o.OutputFormat) {
		return true
	}

	return false
}

// SetOutputFormat gets a reference to the given string and assigns it to the OutputFormat field.
func (o *HtmlFileRequest) SetOutputFormat(v string) {
	o.OutputFormat = &v
}

func (o HtmlFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HtmlFileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceLanguage) {
		toSerialize["sourceLanguage"] = o.SourceLanguage
	}
	if !IsNil(o.TargetLanguages) {
		toSerialize["targetLanguages"] = o.TargetLanguages
	}
	if o.OriginalFileName.IsSet() {
		toSerialize["originalFileName"] = o.OriginalFileName.Get()
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if o.Origin.IsSet() {
		toSerialize["origin"] = o.Origin.Get()
	}
	if !IsNil(o.IsNeedAlignment) {
		toSerialize["isNeedAlignment"] = o.IsNeedAlignment
	}
	if o.TranslationDictionary != nil {
		toSerialize["translationDictionary"] = o.TranslationDictionary
	}
	if !IsNil(o.SavingMode) {
		toSerialize["savingMode"] = o.SavingMode
	}
	if !IsNil(o.OutputFormat) {
		toSerialize["outputFormat"] = o.OutputFormat
	}
	return toSerialize, nil
}

type NullableHtmlFileRequest struct {
	value *HtmlFileRequest
	isSet bool
}

func (v NullableHtmlFileRequest) Get() *HtmlFileRequest {
	return v.value
}

func (v *NullableHtmlFileRequest) Set(val *HtmlFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHtmlFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHtmlFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHtmlFileRequest(val *HtmlFileRequest) *NullableHtmlFileRequest {
	return &NullableHtmlFileRequest{value: val, isSet: true}
}

func (v NullableHtmlFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHtmlFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


