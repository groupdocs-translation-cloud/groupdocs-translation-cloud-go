/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 24.3.0
Contact: anton.perhunov@aspose.com
*/

package groupdocs_translation_cloud

import (
	"encoding/json"
)

// checks if the LanguagePairData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguagePairData{}

// LanguagePairData struct for LanguagePairData
type LanguagePairData struct {
	Source  NullableString `json:"source,omitempty"`
	Targets []string       `json:"targets,omitempty"`
}

// NewLanguagePairData instantiates a new LanguagePairData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguagePairData() *LanguagePairData {
	this := LanguagePairData{}
	return &this
}

// NewLanguagePairDataWithDefaults instantiates a new LanguagePairData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguagePairDataWithDefaults() *LanguagePairData {
	this := LanguagePairData{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguagePairData) GetSource() string {
	if o == nil || IsNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguagePairData) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *LanguagePairData) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *LanguagePairData) SetSource(v string) {
	o.Source.Set(&v)
}

// SetSourceNil sets the value for Source to be an explicit nil
func (o *LanguagePairData) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *LanguagePairData) UnsetSource() {
	o.Source.Unset()
}

// GetTargets returns the Targets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguagePairData) GetTargets() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguagePairData) GetTargetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Targets) {
		return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *LanguagePairData) HasTargets() bool {
	if o != nil && IsNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given []string and assigns it to the Targets field.
func (o *LanguagePairData) SetTargets(v []string) {
	o.Targets = v
}

func (o LanguagePairData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguagePairData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	if o.Targets != nil {
		toSerialize["targets"] = o.Targets
	}
	return toSerialize, nil
}

type NullableLanguagePairData struct {
	value *LanguagePairData
	isSet bool
}

func (v NullableLanguagePairData) Get() *LanguagePairData {
	return v.value
}

func (v *NullableLanguagePairData) Set(val *LanguagePairData) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguagePairData) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguagePairData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguagePairData(val *LanguagePairData) *NullableLanguagePairData {
	return &NullableLanguagePairData{value: val, isSet: true}
}

func (v NullableLanguagePairData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguagePairData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
