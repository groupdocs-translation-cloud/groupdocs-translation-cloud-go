/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 24.3.0
Contact: anton.perhunov@aspose.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package groupdocs_translation_cloud

import (
	"encoding/json"
	"fmt"
)

// HttpStatusCode the model 'HttpStatusCode'
type HttpStatusCode float32

// List of HttpStatusCode
const (
	_100 HttpStatusCode = 100
	_101 HttpStatusCode = 101
	_102 HttpStatusCode = 102
	_103 HttpStatusCode = 103
	_200 HttpStatusCode = 200
	_201 HttpStatusCode = 201
	_202 HttpStatusCode = 202
	_203 HttpStatusCode = 203
	_204 HttpStatusCode = 204
	_205 HttpStatusCode = 205
	_206 HttpStatusCode = 206
	_207 HttpStatusCode = 207
	_208 HttpStatusCode = 208
	_226 HttpStatusCode = 226
	_300 HttpStatusCode = 300
	_301 HttpStatusCode = 301
	_302 HttpStatusCode = 302
	_303 HttpStatusCode = 303
	_304 HttpStatusCode = 304
	_305 HttpStatusCode = 305
	_306 HttpStatusCode = 306
	_307 HttpStatusCode = 307
	_308 HttpStatusCode = 308
	_400 HttpStatusCode = 400
	_401 HttpStatusCode = 401
	_402 HttpStatusCode = 402
	_403 HttpStatusCode = 403
	_404 HttpStatusCode = 404
	_405 HttpStatusCode = 405
	_406 HttpStatusCode = 406
	_407 HttpStatusCode = 407
	_408 HttpStatusCode = 408
	_409 HttpStatusCode = 409
	_410 HttpStatusCode = 410
	_411 HttpStatusCode = 411
	_412 HttpStatusCode = 412
	_413 HttpStatusCode = 413
	_414 HttpStatusCode = 414
	_415 HttpStatusCode = 415
	_416 HttpStatusCode = 416
	_417 HttpStatusCode = 417
	_421 HttpStatusCode = 421
	_422 HttpStatusCode = 422
	_423 HttpStatusCode = 423
	_424 HttpStatusCode = 424
	_426 HttpStatusCode = 426
	_428 HttpStatusCode = 428
	_429 HttpStatusCode = 429
	_431 HttpStatusCode = 431
	_451 HttpStatusCode = 451
	_500 HttpStatusCode = 500
	_501 HttpStatusCode = 501
	_502 HttpStatusCode = 502
	_503 HttpStatusCode = 503
	_504 HttpStatusCode = 504
	_505 HttpStatusCode = 505
	_506 HttpStatusCode = 506
	_507 HttpStatusCode = 507
	_508 HttpStatusCode = 508
	_510 HttpStatusCode = 510
	_511 HttpStatusCode = 511
)

// All allowed values of HttpStatusCode enum
var AllowedHttpStatusCodeEnumValues = []HttpStatusCode{
	100,
	101,
	102,
	103,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	226,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	400,
	401,
	402,
	403,
	404,
	405,
	406,
	407,
	408,
	409,
	410,
	411,
	412,
	413,
	414,
	415,
	416,
	417,
	421,
	422,
	423,
	424,
	426,
	428,
	429,
	431,
	451,
	500,
	501,
	502,
	503,
	504,
	505,
	506,
	507,
	508,
	510,
	511,
}

func (v *HttpStatusCode) UnmarshalJSON(src []byte) error {
	var value float32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpStatusCode(value)
	for _, existing := range AllowedHttpStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpStatusCode", value)
}

// NewHttpStatusCodeFromValue returns a pointer to a valid HttpStatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpStatusCodeFromValue(v float32) (*HttpStatusCode, error) {
	ev := HttpStatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpStatusCode: valid values are %v", v, AllowedHttpStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpStatusCode) IsValid() bool {
	for _, existing := range AllowedHttpStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpStatusCode value
func (v HttpStatusCode) Ptr() *HttpStatusCode {
	return &v
}

type NullableHttpStatusCode struct {
	value *HttpStatusCode
	isSet bool
}

func (v NullableHttpStatusCode) Get() *HttpStatusCode {
	return v.value
}

func (v *NullableHttpStatusCode) Set(val *HttpStatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpStatusCode(val *HttpStatusCode) *NullableHttpStatusCode {
	return &NullableHttpStatusCode{value: val, isSet: true}
}

func (v NullableHttpStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
