/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 23.9.4
Contact: anton.perhunov@aspose.com
*/


package groupdocs_translation_api

import (
	"encoding/json"
)

// checks if the TextRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextRequest{}

// TextRequest struct for TextRequest
type TextRequest struct {
	// Language of original text
	SourceLanguage NullableString `json:"sourceLanguage,omitempty"`
	// List of target languages
	TargetLanguages []string `json:"targetLanguages,omitempty"`
	// Text array to translate
	Texts []string `json:"texts,omitempty"`
	// For analysis only
	Origin NullableString `json:"origin,omitempty"`
	// Set to true if you want to handle markdown in text
	ContainsMarkdown *bool `json:"containsMarkdown,omitempty"`
}

// NewTextRequest instantiates a new TextRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextRequest() *TextRequest {
	this := TextRequest{}
	return &this
}

// NewTextRequestWithDefaults instantiates a new TextRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextRequestWithDefaults() *TextRequest {
	this := TextRequest{}
	return &this
}

// GetSourceLanguage returns the SourceLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TextRequest) GetSourceLanguage() string {
	if o == nil || IsNil(o.SourceLanguage.Get()) {
		var ret string
		return ret
	}
	return *o.SourceLanguage.Get()
}

// GetSourceLanguageOk returns a tuple with the SourceLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TextRequest) GetSourceLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceLanguage.Get(), o.SourceLanguage.IsSet()
}

// HasSourceLanguage returns a boolean if a field has been set.
func (o *TextRequest) HasSourceLanguage() bool {
	if o != nil && o.SourceLanguage.IsSet() {
		return true
	}

	return false
}

// SetSourceLanguage gets a reference to the given NullableString and assigns it to the SourceLanguage field.
func (o *TextRequest) SetSourceLanguage(v string) {
	o.SourceLanguage.Set(&v)
}
// SetSourceLanguageNil sets the value for SourceLanguage to be an explicit nil
func (o *TextRequest) SetSourceLanguageNil() {
	o.SourceLanguage.Set(nil)
}

// UnsetSourceLanguage ensures that no value is present for SourceLanguage, not even an explicit nil
func (o *TextRequest) UnsetSourceLanguage() {
	o.SourceLanguage.Unset()
}

// GetTargetLanguages returns the TargetLanguages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TextRequest) GetTargetLanguages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TargetLanguages
}

// GetTargetLanguagesOk returns a tuple with the TargetLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TextRequest) GetTargetLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetLanguages) {
		return nil, false
	}
	return o.TargetLanguages, true
}

// HasTargetLanguages returns a boolean if a field has been set.
func (o *TextRequest) HasTargetLanguages() bool {
	if o != nil && IsNil(o.TargetLanguages) {
		return true
	}

	return false
}

// SetTargetLanguages gets a reference to the given []string and assigns it to the TargetLanguages field.
func (o *TextRequest) SetTargetLanguages(v []string) {
	o.TargetLanguages = v
}

// GetTexts returns the Texts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TextRequest) GetTexts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Texts
}

// GetTextsOk returns a tuple with the Texts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TextRequest) GetTextsOk() ([]string, bool) {
	if o == nil || IsNil(o.Texts) {
		return nil, false
	}
	return o.Texts, true
}

// HasTexts returns a boolean if a field has been set.
func (o *TextRequest) HasTexts() bool {
	if o != nil && IsNil(o.Texts) {
		return true
	}

	return false
}

// SetTexts gets a reference to the given []string and assigns it to the Texts field.
func (o *TextRequest) SetTexts(v []string) {
	o.Texts = v
}

// GetOrigin returns the Origin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TextRequest) GetOrigin() string {
	if o == nil || IsNil(o.Origin.Get()) {
		var ret string
		return ret
	}
	return *o.Origin.Get()
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TextRequest) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Origin.Get(), o.Origin.IsSet()
}

// HasOrigin returns a boolean if a field has been set.
func (o *TextRequest) HasOrigin() bool {
	if o != nil && o.Origin.IsSet() {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given NullableString and assigns it to the Origin field.
func (o *TextRequest) SetOrigin(v string) {
	o.Origin.Set(&v)
}
// SetOriginNil sets the value for Origin to be an explicit nil
func (o *TextRequest) SetOriginNil() {
	o.Origin.Set(nil)
}

// UnsetOrigin ensures that no value is present for Origin, not even an explicit nil
func (o *TextRequest) UnsetOrigin() {
	o.Origin.Unset()
}

// GetContainsMarkdown returns the ContainsMarkdown field value if set, zero value otherwise.
func (o *TextRequest) GetContainsMarkdown() bool {
	if o == nil || IsNil(o.ContainsMarkdown) {
		var ret bool
		return ret
	}
	return *o.ContainsMarkdown
}

// GetContainsMarkdownOk returns a tuple with the ContainsMarkdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextRequest) GetContainsMarkdownOk() (*bool, bool) {
	if o == nil || IsNil(o.ContainsMarkdown) {
		return nil, false
	}
	return o.ContainsMarkdown, true
}

// HasContainsMarkdown returns a boolean if a field has been set.
func (o *TextRequest) HasContainsMarkdown() bool {
	if o != nil && !IsNil(o.ContainsMarkdown) {
		return true
	}

	return false
}

// SetContainsMarkdown gets a reference to the given bool and assigns it to the ContainsMarkdown field.
func (o *TextRequest) SetContainsMarkdown(v bool) {
	o.ContainsMarkdown = &v
}

func (o TextRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceLanguage.IsSet() {
		toSerialize["sourceLanguage"] = o.SourceLanguage.Get()
	}
	if o.TargetLanguages != nil {
		toSerialize["targetLanguages"] = o.TargetLanguages
	}
	if o.Texts != nil {
		toSerialize["texts"] = o.Texts
	}
	if o.Origin.IsSet() {
		toSerialize["origin"] = o.Origin.Get()
	}
	if !IsNil(o.ContainsMarkdown) {
		toSerialize["containsMarkdown"] = o.ContainsMarkdown
	}
	return toSerialize, nil
}

type NullableTextRequest struct {
	value *TextRequest
	isSet bool
}

func (v NullableTextRequest) Get() *TextRequest {
	return v.value
}

func (v *NullableTextRequest) Set(val *TextRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTextRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTextRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextRequest(val *TextRequest) *NullableTextRequest {
	return &NullableTextRequest{value: val, isSet: true}
}

func (v NullableTextRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


