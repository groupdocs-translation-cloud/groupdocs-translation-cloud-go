/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 25.3.0
Contact: anton.perhunov@aspose.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package groupdocs_translation_cloud

import (
	"encoding/json"
)

// checks if the StringStringTuple type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StringStringTuple{}

// StringStringTuple struct for StringStringTuple
type StringStringTuple struct {
	Item1 *string `json:"item1,omitempty"`
	Item2 *string `json:"item2,omitempty"`
}

// NewStringStringTuple instantiates a new StringStringTuple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStringStringTuple() *StringStringTuple {
	this := StringStringTuple{}
	return &this
}

// NewStringStringTupleWithDefaults instantiates a new StringStringTuple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStringStringTupleWithDefaults() *StringStringTuple {
	this := StringStringTuple{}
	return &this
}

// GetItem1 returns the Item1 field value if set, zero value otherwise.
func (o *StringStringTuple) GetItem1() string {
	if o == nil || IsNil(o.Item1) {
		var ret string
		return ret
	}
	return *o.Item1
}

// GetItem1Ok returns a tuple with the Item1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringStringTuple) GetItem1Ok() (*string, bool) {
	if o == nil || IsNil(o.Item1) {
		return nil, false
	}
	return o.Item1, true
}

// HasItem1 returns a boolean if a field has been set.
func (o *StringStringTuple) HasItem1() bool {
	if o != nil && !IsNil(o.Item1) {
		return true
	}

	return false
}

// SetItem1 gets a reference to the given string and assigns it to the Item1 field.
func (o *StringStringTuple) SetItem1(v string) {
	o.Item1 = &v
}

// GetItem2 returns the Item2 field value if set, zero value otherwise.
func (o *StringStringTuple) GetItem2() string {
	if o == nil || IsNil(o.Item2) {
		var ret string
		return ret
	}
	return *o.Item2
}

// GetItem2Ok returns a tuple with the Item2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringStringTuple) GetItem2Ok() (*string, bool) {
	if o == nil || IsNil(o.Item2) {
		return nil, false
	}
	return o.Item2, true
}

// HasItem2 returns a boolean if a field has been set.
func (o *StringStringTuple) HasItem2() bool {
	if o != nil && !IsNil(o.Item2) {
		return true
	}

	return false
}

// SetItem2 gets a reference to the given string and assigns it to the Item2 field.
func (o *StringStringTuple) SetItem2(v string) {
	o.Item2 = &v
}

func (o StringStringTuple) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StringStringTuple) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Item1) {
		toSerialize["item1"] = o.Item1
	}
	if !IsNil(o.Item2) {
		toSerialize["item2"] = o.Item2
	}
	return toSerialize, nil
}

type NullableStringStringTuple struct {
	value *StringStringTuple
	isSet bool
}

func (v NullableStringStringTuple) Get() *StringStringTuple {
	return v.value
}

func (v *NullableStringStringTuple) Set(val *StringStringTuple) {
	v.value = val
	v.isSet = true
}

func (v NullableStringStringTuple) IsSet() bool {
	return v.isSet
}

func (v *NullableStringStringTuple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringStringTuple(val *StringStringTuple) *NullableStringStringTuple {
	return &NullableStringStringTuple{value: val, isSet: true}
}

func (v NullableStringStringTuple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringStringTuple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


