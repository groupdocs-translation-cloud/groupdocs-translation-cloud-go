/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 24.3.0
Contact: anton.perhunov@aspose.com
*/

package groupdocs_translation_cloud

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SpreadsheetFileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpreadsheetFileRequest{}

// SpreadsheetFileRequest Request for spreadsheet files, like xls, xlsx, xlsm, ods
type SpreadsheetFileRequest struct {
	// Language of original file
	SourceLanguage string `json:"sourceLanguage"`
	// List of target languages
	TargetLanguages []string `json:"targetLanguages"`
	// File as byte array
	File NullableString `json:"file,omitempty"`
	// Type in the file name. If null will be as request ID.
	OriginalFileName NullableString `json:"originalFileName,omitempty"`
	// Link to file for translation. Ignore, if \"file\" property not null
	Url NullableString `json:"url,omitempty"`
	// Url or name of application using this SDK. Not required.
	Origin NullableString `json:"origin,omitempty"`
	// Toggle file saving mode for storage.  Is Files by default.
	SavingMode *string `json:"savingMode,omitempty"`
	// Input file format
	Format string `json:"format"`
	// output file format
	OutputFormat string `json:"outputFormat"`
	// List of Worksheets to translate by sequence number (1-based index). If not present, translate all worksheets
	Worksheets []int32 `json:"worksheets,omitempty"`
	// Dictionary of ranges in Excel workbooks
	Ranges map[string]WorksheetData `json:"ranges,omitempty"`
}

// NewSpreadsheetFileRequest instantiates a new SpreadsheetFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpreadsheetFileRequest(sourceLanguage string, targetLanguages []string, format string, outputFormat string) *SpreadsheetFileRequest {
	this := SpreadsheetFileRequest{}
	this.SourceLanguage = sourceLanguage
	this.TargetLanguages = targetLanguages
	this.Format = format
	this.OutputFormat = outputFormat
	return &this
}

// NewSpreadsheetFileRequestWithDefaults instantiates a new SpreadsheetFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpreadsheetFileRequestWithDefaults() *SpreadsheetFileRequest {
	this := SpreadsheetFileRequest{}
	var sourceLanguage string = "en"
	this.SourceLanguage = sourceLanguage
	var format string = "Xlsx"
	this.Format = format
	return &this
}

// GetSourceLanguage returns the SourceLanguage field value
func (o *SpreadsheetFileRequest) GetSourceLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceLanguage
}

// GetSourceLanguageOk returns a tuple with the SourceLanguage field value
// and a boolean to check if the value has been set.
func (o *SpreadsheetFileRequest) GetSourceLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceLanguage, true
}

// SetSourceLanguage sets field value
func (o *SpreadsheetFileRequest) SetSourceLanguage(v string) {
	o.SourceLanguage = v
}

// GetTargetLanguages returns the TargetLanguages field value
func (o *SpreadsheetFileRequest) GetTargetLanguages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TargetLanguages
}

// GetTargetLanguagesOk returns a tuple with the TargetLanguages field value
// and a boolean to check if the value has been set.
func (o *SpreadsheetFileRequest) GetTargetLanguagesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetLanguages, true
}

// SetTargetLanguages sets field value
func (o *SpreadsheetFileRequest) SetTargetLanguages(v []string) {
	o.TargetLanguages = v
}

// GetFile returns the File field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpreadsheetFileRequest) GetFile() string {
	if o == nil || IsNil(o.File.Get()) {
		var ret string
		return ret
	}
	return *o.File.Get()
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpreadsheetFileRequest) GetFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.File.Get(), o.File.IsSet()
}

// HasFile returns a boolean if a field has been set.
func (o *SpreadsheetFileRequest) HasFile() bool {
	if o != nil && o.File.IsSet() {
		return true
	}

	return false
}

// SetFile gets a reference to the given NullableString and assigns it to the File field.
func (o *SpreadsheetFileRequest) SetFile(v string) {
	o.File.Set(&v)
}

// SetFileNil sets the value for File to be an explicit nil
func (o *SpreadsheetFileRequest) SetFileNil() {
	o.File.Set(nil)
}

// UnsetFile ensures that no value is present for File, not even an explicit nil
func (o *SpreadsheetFileRequest) UnsetFile() {
	o.File.Unset()
}

// GetOriginalFileName returns the OriginalFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpreadsheetFileRequest) GetOriginalFileName() string {
	if o == nil || IsNil(o.OriginalFileName.Get()) {
		var ret string
		return ret
	}
	return *o.OriginalFileName.Get()
}

// GetOriginalFileNameOk returns a tuple with the OriginalFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpreadsheetFileRequest) GetOriginalFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalFileName.Get(), o.OriginalFileName.IsSet()
}

// HasOriginalFileName returns a boolean if a field has been set.
func (o *SpreadsheetFileRequest) HasOriginalFileName() bool {
	if o != nil && o.OriginalFileName.IsSet() {
		return true
	}

	return false
}

// SetOriginalFileName gets a reference to the given NullableString and assigns it to the OriginalFileName field.
func (o *SpreadsheetFileRequest) SetOriginalFileName(v string) {
	o.OriginalFileName.Set(&v)
}

// SetOriginalFileNameNil sets the value for OriginalFileName to be an explicit nil
func (o *SpreadsheetFileRequest) SetOriginalFileNameNil() {
	o.OriginalFileName.Set(nil)
}

// UnsetOriginalFileName ensures that no value is present for OriginalFileName, not even an explicit nil
func (o *SpreadsheetFileRequest) UnsetOriginalFileName() {
	o.OriginalFileName.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpreadsheetFileRequest) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpreadsheetFileRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *SpreadsheetFileRequest) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *SpreadsheetFileRequest) SetUrl(v string) {
	o.Url.Set(&v)
}

// SetUrlNil sets the value for Url to be an explicit nil
func (o *SpreadsheetFileRequest) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *SpreadsheetFileRequest) UnsetUrl() {
	o.Url.Unset()
}

// GetOrigin returns the Origin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpreadsheetFileRequest) GetOrigin() string {
	if o == nil || IsNil(o.Origin.Get()) {
		var ret string
		return ret
	}
	return *o.Origin.Get()
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpreadsheetFileRequest) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Origin.Get(), o.Origin.IsSet()
}

// HasOrigin returns a boolean if a field has been set.
func (o *SpreadsheetFileRequest) HasOrigin() bool {
	if o != nil && o.Origin.IsSet() {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given NullableString and assigns it to the Origin field.
func (o *SpreadsheetFileRequest) SetOrigin(v string) {
	o.Origin.Set(&v)
}

// SetOriginNil sets the value for Origin to be an explicit nil
func (o *SpreadsheetFileRequest) SetOriginNil() {
	o.Origin.Set(nil)
}

// UnsetOrigin ensures that no value is present for Origin, not even an explicit nil
func (o *SpreadsheetFileRequest) UnsetOrigin() {
	o.Origin.Unset()
}

// GetSavingMode returns the SavingMode field value if set, zero value otherwise.
func (o *SpreadsheetFileRequest) GetSavingMode() string {
	if o == nil || IsNil(o.SavingMode) {
		var ret string
		return ret
	}
	return *o.SavingMode
}

// GetSavingModeOk returns a tuple with the SavingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpreadsheetFileRequest) GetSavingModeOk() (*string, bool) {
	if o == nil || IsNil(o.SavingMode) {
		return nil, false
	}
	return o.SavingMode, true
}

// HasSavingMode returns a boolean if a field has been set.
func (o *SpreadsheetFileRequest) HasSavingMode() bool {
	if o != nil && !IsNil(o.SavingMode) {
		return true
	}

	return false
}

// SetSavingMode gets a reference to the given string and assigns it to the SavingMode field.
func (o *SpreadsheetFileRequest) SetSavingMode(v string) {
	o.SavingMode = &v
}

// GetFormat returns the Format field value
func (o *SpreadsheetFileRequest) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *SpreadsheetFileRequest) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *SpreadsheetFileRequest) SetFormat(v string) {
	o.Format = v
}

// GetOutputFormat returns the OutputFormat field value
func (o *SpreadsheetFileRequest) GetOutputFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OutputFormat
}

// GetOutputFormatOk returns a tuple with the OutputFormat field value
// and a boolean to check if the value has been set.
func (o *SpreadsheetFileRequest) GetOutputFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutputFormat, true
}

// SetOutputFormat sets field value
func (o *SpreadsheetFileRequest) SetOutputFormat(v string) {
	o.OutputFormat = v
}

// GetWorksheets returns the Worksheets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpreadsheetFileRequest) GetWorksheets() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Worksheets
}

// GetWorksheetsOk returns a tuple with the Worksheets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpreadsheetFileRequest) GetWorksheetsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Worksheets) {
		return nil, false
	}
	return o.Worksheets, true
}

// HasWorksheets returns a boolean if a field has been set.
func (o *SpreadsheetFileRequest) HasWorksheets() bool {
	if o != nil && IsNil(o.Worksheets) {
		return true
	}

	return false
}

// SetWorksheets gets a reference to the given []int32 and assigns it to the Worksheets field.
func (o *SpreadsheetFileRequest) SetWorksheets(v []int32) {
	o.Worksheets = v
}

// GetRanges returns the Ranges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpreadsheetFileRequest) GetRanges() map[string]WorksheetData {
	if o == nil {
		var ret map[string]WorksheetData
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpreadsheetFileRequest) GetRangesOk() (*map[string]WorksheetData, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return &o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *SpreadsheetFileRequest) HasRanges() bool {
	if o != nil && IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given map[string]WorksheetData and assigns it to the Ranges field.
func (o *SpreadsheetFileRequest) SetRanges(v map[string]WorksheetData) {
	o.Ranges = v
}

func (o SpreadsheetFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpreadsheetFileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sourceLanguage"] = o.SourceLanguage
	toSerialize["targetLanguages"] = o.TargetLanguages
	if o.File.IsSet() {
		toSerialize["file"] = o.File.Get()
	}
	if o.OriginalFileName.IsSet() {
		toSerialize["originalFileName"] = o.OriginalFileName.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.Origin.IsSet() {
		toSerialize["origin"] = o.Origin.Get()
	}
	if !IsNil(o.SavingMode) {
		toSerialize["savingMode"] = o.SavingMode
	}
	toSerialize["format"] = o.Format
	toSerialize["outputFormat"] = o.OutputFormat
	if o.Worksheets != nil {
		toSerialize["worksheets"] = o.Worksheets
	}
	if o.Ranges != nil {
		toSerialize["ranges"] = o.Ranges
	}
	return toSerialize, nil
}

type NullableSpreadsheetFileRequest struct {
	value *SpreadsheetFileRequest
	isSet bool
}

func (v NullableSpreadsheetFileRequest) Get() *SpreadsheetFileRequest {
	return v.value
}

func (v *NullableSpreadsheetFileRequest) Set(val *SpreadsheetFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSpreadsheetFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSpreadsheetFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpreadsheetFileRequest(val *SpreadsheetFileRequest) *NullableSpreadsheetFileRequest {
	return &NullableSpreadsheetFileRequest{value: val, isSet: true}
}

func (v NullableSpreadsheetFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpreadsheetFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
