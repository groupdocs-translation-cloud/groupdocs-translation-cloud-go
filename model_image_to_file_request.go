/*
GroupDocs.Translation SDK

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 24.3.0
Contact: anton.perhunov@aspose.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package groupdocs_translation_cloud

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImageToFileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageToFileRequest{}

// ImageToFileRequest struct for ImageToFileRequest
type ImageToFileRequest struct {
	// Language of original file
	SourceLanguage string `json:"sourceLanguage"`
	// List of target languages
	TargetLanguages []string `json:"targetLanguages"`
	// File as byte array
	File NullableString `json:"file,omitempty"`
	// Type in the file name. If null will be as request ID.
	OriginalFileName NullableString `json:"originalFileName,omitempty"`
	// Link to file for translation. Ignore, if \"file\" property not null
	Url NullableString `json:"url,omitempty"`
	// Url or name of application using this SDK. Not required.
	Origin NullableString `json:"origin,omitempty"`
	// Toggle file saving mode for storage.  Is Files by default.
	SavingMode *string `json:"savingMode,omitempty"`
	// Original file format
	Format *string `json:"format,omitempty"`
	// File format after recognition
	Ocrformat string `json:"ocrformat"`
	// output file format
	OutputFormat string `json:"outputFormat"`
	// Left to write angle to rotate scanned image / pdf
	RotationAngle *int32 `json:"rotationAngle,omitempty"`
	// If document's formatting should be preserved, default true
	Formatting *bool `json:"formatting,omitempty"`
	// endpoints route
	Route NullableString `json:"route,omitempty"`
	// List of pages to translate for scanned pdf
	Pages []int32 `json:"pages,omitempty"`
}

type _ImageToFileRequest ImageToFileRequest

// NewImageToFileRequest instantiates a new ImageToFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageToFileRequest(sourceLanguage string, targetLanguages []string, ocrformat string, outputFormat string) *ImageToFileRequest {
	this := ImageToFileRequest{}
	this.SourceLanguage = sourceLanguage
	this.TargetLanguages = targetLanguages
	var format string = "Unknown"
	this.Format = &format
	this.Ocrformat = ocrformat
	this.OutputFormat = outputFormat
	var formatting bool = true
	this.Formatting = &formatting
	return &this
}

// NewImageToFileRequestWithDefaults instantiates a new ImageToFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageToFileRequestWithDefaults() *ImageToFileRequest {
	this := ImageToFileRequest{}
	var sourceLanguage string = "en"
	this.SourceLanguage = sourceLanguage
	var format string = "Unknown"
	this.Format = &format
	var ocrformat string = "Pdf"
	this.Ocrformat = ocrformat
	var formatting bool = true
	this.Formatting = &formatting
	return &this
}

// GetSourceLanguage returns the SourceLanguage field value
func (o *ImageToFileRequest) GetSourceLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceLanguage
}

// GetSourceLanguageOk returns a tuple with the SourceLanguage field value
// and a boolean to check if the value has been set.
func (o *ImageToFileRequest) GetSourceLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceLanguage, true
}

// SetSourceLanguage sets field value
func (o *ImageToFileRequest) SetSourceLanguage(v string) {
	o.SourceLanguage = v
}

// GetTargetLanguages returns the TargetLanguages field value
func (o *ImageToFileRequest) GetTargetLanguages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TargetLanguages
}

// GetTargetLanguagesOk returns a tuple with the TargetLanguages field value
// and a boolean to check if the value has been set.
func (o *ImageToFileRequest) GetTargetLanguagesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetLanguages, true
}

// SetTargetLanguages sets field value
func (o *ImageToFileRequest) SetTargetLanguages(v []string) {
	o.TargetLanguages = v
}

// GetFile returns the File field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageToFileRequest) GetFile() string {
	if o == nil || IsNil(o.File.Get()) {
		var ret string
		return ret
	}
	return *o.File.Get()
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageToFileRequest) GetFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.File.Get(), o.File.IsSet()
}

// HasFile returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasFile() bool {
	if o != nil && o.File.IsSet() {
		return true
	}

	return false
}

// SetFile gets a reference to the given NullableString and assigns it to the File field.
func (o *ImageToFileRequest) SetFile(v string) {
	o.File.Set(&v)
}

// SetFileNil sets the value for File to be an explicit nil
func (o *ImageToFileRequest) SetFileNil() {
	o.File.Set(nil)
}

// UnsetFile ensures that no value is present for File, not even an explicit nil
func (o *ImageToFileRequest) UnsetFile() {
	o.File.Unset()
}

// GetOriginalFileName returns the OriginalFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageToFileRequest) GetOriginalFileName() string {
	if o == nil || IsNil(o.OriginalFileName.Get()) {
		var ret string
		return ret
	}
	return *o.OriginalFileName.Get()
}

// GetOriginalFileNameOk returns a tuple with the OriginalFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageToFileRequest) GetOriginalFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalFileName.Get(), o.OriginalFileName.IsSet()
}

// HasOriginalFileName returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasOriginalFileName() bool {
	if o != nil && o.OriginalFileName.IsSet() {
		return true
	}

	return false
}

// SetOriginalFileName gets a reference to the given NullableString and assigns it to the OriginalFileName field.
func (o *ImageToFileRequest) SetOriginalFileName(v string) {
	o.OriginalFileName.Set(&v)
}

// SetOriginalFileNameNil sets the value for OriginalFileName to be an explicit nil
func (o *ImageToFileRequest) SetOriginalFileNameNil() {
	o.OriginalFileName.Set(nil)
}

// UnsetOriginalFileName ensures that no value is present for OriginalFileName, not even an explicit nil
func (o *ImageToFileRequest) UnsetOriginalFileName() {
	o.OriginalFileName.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageToFileRequest) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageToFileRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *ImageToFileRequest) SetUrl(v string) {
	o.Url.Set(&v)
}

// SetUrlNil sets the value for Url to be an explicit nil
func (o *ImageToFileRequest) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *ImageToFileRequest) UnsetUrl() {
	o.Url.Unset()
}

// GetOrigin returns the Origin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageToFileRequest) GetOrigin() string {
	if o == nil || IsNil(o.Origin.Get()) {
		var ret string
		return ret
	}
	return *o.Origin.Get()
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageToFileRequest) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Origin.Get(), o.Origin.IsSet()
}

// HasOrigin returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasOrigin() bool {
	if o != nil && o.Origin.IsSet() {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given NullableString and assigns it to the Origin field.
func (o *ImageToFileRequest) SetOrigin(v string) {
	o.Origin.Set(&v)
}

// SetOriginNil sets the value for Origin to be an explicit nil
func (o *ImageToFileRequest) SetOriginNil() {
	o.Origin.Set(nil)
}

// UnsetOrigin ensures that no value is present for Origin, not even an explicit nil
func (o *ImageToFileRequest) UnsetOrigin() {
	o.Origin.Unset()
}

// GetSavingMode returns the SavingMode field value if set, zero value otherwise.
func (o *ImageToFileRequest) GetSavingMode() string {
	if o == nil || IsNil(o.SavingMode) {
		var ret string
		return ret
	}
	return *o.SavingMode
}

// GetSavingModeOk returns a tuple with the SavingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageToFileRequest) GetSavingModeOk() (*string, bool) {
	if o == nil || IsNil(o.SavingMode) {
		return nil, false
	}
	return o.SavingMode, true
}

// HasSavingMode returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasSavingMode() bool {
	if o != nil && !IsNil(o.SavingMode) {
		return true
	}

	return false
}

// SetSavingMode gets a reference to the given string and assigns it to the SavingMode field.
func (o *ImageToFileRequest) SetSavingMode(v string) {
	o.SavingMode = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ImageToFileRequest) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageToFileRequest) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ImageToFileRequest) SetFormat(v string) {
	o.Format = &v
}

// GetOcrformat returns the Ocrformat field value
func (o *ImageToFileRequest) GetOcrformat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ocrformat
}

// GetOcrformatOk returns a tuple with the Ocrformat field value
// and a boolean to check if the value has been set.
func (o *ImageToFileRequest) GetOcrformatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ocrformat, true
}

// SetOcrformat sets field value
func (o *ImageToFileRequest) SetOcrformat(v string) {
	o.Ocrformat = v
}

// GetOutputFormat returns the OutputFormat field value
func (o *ImageToFileRequest) GetOutputFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OutputFormat
}

// GetOutputFormatOk returns a tuple with the OutputFormat field value
// and a boolean to check if the value has been set.
func (o *ImageToFileRequest) GetOutputFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutputFormat, true
}

// SetOutputFormat sets field value
func (o *ImageToFileRequest) SetOutputFormat(v string) {
	o.OutputFormat = v
}

// GetRotationAngle returns the RotationAngle field value if set, zero value otherwise.
func (o *ImageToFileRequest) GetRotationAngle() int32 {
	if o == nil || IsNil(o.RotationAngle) {
		var ret int32
		return ret
	}
	return *o.RotationAngle
}

// GetRotationAngleOk returns a tuple with the RotationAngle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageToFileRequest) GetRotationAngleOk() (*int32, bool) {
	if o == nil || IsNil(o.RotationAngle) {
		return nil, false
	}
	return o.RotationAngle, true
}

// HasRotationAngle returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasRotationAngle() bool {
	if o != nil && !IsNil(o.RotationAngle) {
		return true
	}

	return false
}

// SetRotationAngle gets a reference to the given int32 and assigns it to the RotationAngle field.
func (o *ImageToFileRequest) SetRotationAngle(v int32) {
	o.RotationAngle = &v
}

// GetFormatting returns the Formatting field value if set, zero value otherwise.
func (o *ImageToFileRequest) GetFormatting() bool {
	if o == nil || IsNil(o.Formatting) {
		var ret bool
		return ret
	}
	return *o.Formatting
}

// GetFormattingOk returns a tuple with the Formatting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageToFileRequest) GetFormattingOk() (*bool, bool) {
	if o == nil || IsNil(o.Formatting) {
		return nil, false
	}
	return o.Formatting, true
}

// HasFormatting returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasFormatting() bool {
	if o != nil && !IsNil(o.Formatting) {
		return true
	}

	return false
}

// SetFormatting gets a reference to the given bool and assigns it to the Formatting field.
func (o *ImageToFileRequest) SetFormatting(v bool) {
	o.Formatting = &v
}

// GetRoute returns the Route field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageToFileRequest) GetRoute() string {
	if o == nil || IsNil(o.Route.Get()) {
		var ret string
		return ret
	}
	return *o.Route.Get()
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageToFileRequest) GetRouteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Route.Get(), o.Route.IsSet()
}

// HasRoute returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasRoute() bool {
	if o != nil && o.Route.IsSet() {
		return true
	}

	return false
}

// SetRoute gets a reference to the given NullableString and assigns it to the Route field.
func (o *ImageToFileRequest) SetRoute(v string) {
	o.Route.Set(&v)
}

// SetRouteNil sets the value for Route to be an explicit nil
func (o *ImageToFileRequest) SetRouteNil() {
	o.Route.Set(nil)
}

// UnsetRoute ensures that no value is present for Route, not even an explicit nil
func (o *ImageToFileRequest) UnsetRoute() {
	o.Route.Unset()
}

// GetPages returns the Pages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageToFileRequest) GetPages() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageToFileRequest) GetPagesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Pages) {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *ImageToFileRequest) HasPages() bool {
	if o != nil && !IsNil(o.Pages) {
		return true
	}

	return false
}

// SetPages gets a reference to the given []int32 and assigns it to the Pages field.
func (o *ImageToFileRequest) SetPages(v []int32) {
	o.Pages = v
}

func (o ImageToFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageToFileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sourceLanguage"] = o.SourceLanguage
	toSerialize["targetLanguages"] = o.TargetLanguages
	if o.File.IsSet() {
		toSerialize["file"] = o.File.Get()
	}
	if o.OriginalFileName.IsSet() {
		toSerialize["originalFileName"] = o.OriginalFileName.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.Origin.IsSet() {
		toSerialize["origin"] = o.Origin.Get()
	}
	if !IsNil(o.SavingMode) {
		toSerialize["savingMode"] = o.SavingMode
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	toSerialize["ocrformat"] = o.Ocrformat
	toSerialize["outputFormat"] = o.OutputFormat
	if !IsNil(o.RotationAngle) {
		toSerialize["rotationAngle"] = o.RotationAngle
	}
	if !IsNil(o.Formatting) {
		toSerialize["formatting"] = o.Formatting
	}
	if o.Route.IsSet() {
		toSerialize["route"] = o.Route.Get()
	}
	if o.Pages != nil {
		toSerialize["pages"] = o.Pages
	}
	return toSerialize, nil
}

func (o *ImageToFileRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceLanguage",
		"targetLanguages",
		"ocrformat",
		"outputFormat",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageToFileRequest := _ImageToFileRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImageToFileRequest)

	if err != nil {
		return err
	}

	*o = ImageToFileRequest(varImageToFileRequest)

	return err
}

type NullableImageToFileRequest struct {
	value *ImageToFileRequest
	isSet bool
}

func (v NullableImageToFileRequest) Get() *ImageToFileRequest {
	return v.value
}

func (v *NullableImageToFileRequest) Set(val *ImageToFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImageToFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImageToFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageToFileRequest(val *ImageToFileRequest) *NullableImageToFileRequest {
	return &NullableImageToFileRequest{value: val, isSet: true}
}

func (v NullableImageToFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageToFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
